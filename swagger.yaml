swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "LOL Foods API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
  - name: "Restaurants"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
schemes:
  - "https"
  - "http"
paths:
  /restaurant:
    post:
      tags:
        - "Restaurants"
      summary: "create a restaurant"
      description: ""
      operationId: "addRestaurant"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Restaurant object that needs to be added to the database"
          required: true
          schema:
            $ref: "#/definitions/Restaurant"
      responses:
        "201":
          description: "Created"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "405":
          description: "Invalid input"
        "500":
          description: "Internal server error"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"

    put:
      tags:
        - "Restaurants"
      summary: "Update an existing restaurant"
      description: ""
      operationId: "updateRestaurant"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Restaurant object to be updated"
          required: true
          schema:
            $ref: "#/definitions/Restaurant"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "405":
          description: "Invalid input"
        "500":
          description: "Internal server error"

      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"

  /restaurant/{id}:
    get:
      tags:
        - "Restaurants"
      summary: "Finds Restaurant by id"
      operationId: "findRestaurantById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "Status values that need to be considered for filter"
          required: true
          type: "integer"

      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Restaurant"
        "204":
          description: "No content"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "405":
          description: "Invalid input"
        "500":
          description: "Internal server error"

      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"

  /client:
    post:
      tags:
        - "Clients"
      summary: "create a client"
      description: ""
      operationId: "addClient"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Client object that needs to be added to the database"
          required: true
          schema:
            $ref: "#/definitions/Restaurant"
      responses:
        "201":
          description: "Created"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "405":
          description: "Invalid input"
        "500":
          description: "Internal server error"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"

    put:
      tags:
        - "Clients"
      summary: "Update an existing client"
      description: ""
      operationId: "updateClient"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Client object to be updated"
          required: true
          schema:
            $ref: "#/definitions/Restaurant"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "405":
          description: "Invalid input"
        "500":
          description: "Internal server error"

  /client/{id}:
    get:
      tags:
        - "Clients"
      summary: "Finds Client by id"
      operationId: "findClientById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "Status values that need to be considered for filter"
          required: true
          type: "integer"

      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Client"
        "204":
          description: "no content"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "405":
          description: "Invalid input"
        "500":
          description: "Internal server error"


  /order:
    post:
      tags:
        - "Orders"
      summary: "Create new Order"
      description: "The initial state of a newly created order is always RECEIVING.
      \nUse the service update order status to step forward the order state."
      operationId: "createOrder"
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: order
          required: true
          schema:
            $ref: "#/definitions/Order"

      responses:
        "201":
          description: "created"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "405":
          description: "Invalid input"
        "500":
          description: "Internal server error"

    put:
      tags:
        - "Orders"
      summary: "Steps forward the order status"
      description: "Updates the order state to the next one:
      \nRECEIVING -> PREPARING
      \nPREPARING -> READY
      \nPICKED -> DELIVERED
      \n\nIf the order is not in RECEIVING, PREPARING or PICKED state, this request has no effect and returns 422"
      operationId: "updateOrder"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: order
          required: true
          schema:
            $ref: "#/definitions/OrderUpdate"

      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "405":
          description: "Invalid input"
        "422":
          description: "Unprocessable entity"
        "500":
          description: "Internal server error"

    get:
      tags:
        - "Orders"
      summary: "Finds Order by restaurant"
      operationId: "findOrdersByRestaurantId"
      produces:
        - "application/json"
      parameters:
        - name: "restaurantId"
          in: "query"
          description: "orders by restaurant"
          required: true
          type: "integer"

      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/OrdersArray"
        "204":
          description: "no content"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "405":
          description: "Invalid input"
        "500":
          description: "Internal server error"

  /order/{id}:
    get:
      tags:
        - "Orders"
      summary: "Finds Order by id"
      operationId: "findOrderById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "Status values that need to be considered for filter"
          required: true
          type: "integer"

      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "204":
          description: "no content"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "405":
          description: "Invalid input"
        "500":
          description: "Internal server error"

  /routes:
    get:
      tags:
        - "Routes"
      summary: "Suggested routes for all orders in READY status"
      description: "Returns the best routes for orders with READY status. This result is provisory as more orders may entry in READY status, the routes may change to be optimized.
        \n\nTo confirm a specific route by id call the endpoint for route confirmation. Once a route is confirmed, all its orders change the status from READY to PICKED and time starts to run.
        \n\nAll orders in a single route must belong to the same restaurant.
        \n\nAt most 3 orders by route."
      operationId: "getRoutes"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Routes"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "405":
          description: "Invalid input"
        "500":
          description: "Internal server error"

    put:
      tags:
        - "Routes"
      summary: "Route Confirmation"
      operationId: "confirmRoute"
      parameters:
        - in: "body"
          name: "body"
          description: "Route to be confirmed"
          required: true
          schema:
            $ref: "#/definitions/RouteConfirmation"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Route"
        "400":
          description: "Bad request"
        "401":
          description: "Unauthorized"
        "405":
          description: "Invalid input"
        "422":
          description: "Unprocessable Entity. Id not found"
        "500":
          description: "Internal server error"


securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"

  Restaurant:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 5
      lat:
        type: number
        format: double
        example: 25.698
      lon:
        type: number
        format: double
        example: -8.785

  Client:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 5
      lat:
        type: number
        format: double
        example: 25.6908
      lon:
        type: number
        format: double
        example: -8.7851

  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      restaurantId:
        type: integer
        format: int64
      clientId:
        type: integer
        format: int64
      pickup:
        type: string
        format: date-time
        example: "2018-06-05T13:37:00Z"
        description: the moment when driver picks up the dish, the status changes from READY to PICKED
      dueTime:
        type: string
        format: date-time
        example: "2018-06-05T13:37:00Z"
        description: due time to be delivered based on the client location
      delivered:
        type: string
        format: date-time
        example: "2018-06-05T13:37:00Z"
        description: set atutomatically when status changes to DELIVERED
      status:
        type: string
        enum: [RECEIVING, PREPARING, READY, PICKED, DELIVERED]

  OrdersArray:
    type: array
    items:
      $ref: "#/definitions/Order"

  OrderUpdate:
    type: object
    properties:
      id:
        type: integer
        format: int64

  Routes:
    type: object
    properties:
      routes:
        type: array
        items:
          $ref: "#/definitions/Route"

  RouteConfirmation:
    type: object
    properties:
      id:
        type: integer
        format: int64

  Route:
    type: object
    properties:
      id:
        type: integer
        format: int64
      orders:
        type: array
        items:
          $ref: "#/definitions/Orders"
      confirmed:
        type: boolean

  Orders:
    type: integer